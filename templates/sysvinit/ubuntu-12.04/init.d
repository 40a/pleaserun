#!/bin/sh
# Init script for {{{ name }}}
# Maintained by {{{ author }}}
# Generated by pleaserun.
# Implemented based on LSB Core 3.1:
#   * Sections: 20.2, 20.3
#
### BEGIN INIT INFO
# Provides:          {{{ name }}}
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: {{{ one_line_description }}}
# Description:       {{{ description }}}
### END INIT INFO

PATH=/sbin:/usr/sbin:/bin:/usr/bin
export PATH

name={{#escaped}}{{#safe_filename}}{{{ name }}}{{/safe_filename}}{{/escaped}}
program={{#escaped}}{{{ program }}}{{/escaped}}
args={{{ escaped_args }}}
pidfile="/var/run/$NAME.pid"

[ -r /etc/default/$NAME ] && . /etc/default/$NAME
[ -r /etc/sysconfig/$NAME ] && . /etc/sysconfig/$NAME

start() {
  su {{user}} -c "
    echo \$\$ > $pidfile
    exec > /tmp/x.log
    exec 2> /tmp/x.err
    #newgrp {{group}}
    exec flock -xn \"$pidfile\" \"$program\" \"\$@\"
  " - $args
  echo $?
  pid=$!
  return 0
}

stop() {
  # Try a few times to kill TERM the program
  if status ; then
    pid=`cat "$pidfile"`
    kill -TERM $pid
    # Wait for it to exit.
    for i in 1 2 3 4 5 ; do
      status || break
      sleep 1
    done
  fi
}

status() {
  if ! flock -xn "$pidfile" true ; then
    # flock failed, file is locked, check if process is up?
    if kill -0 `cat "$pidfile"` 2> /dev/null; then
      return 0 # process is up
    else
      return 2 # program is dead but pid file exists and is locked
    fi
  else
    return 3 # program is not running
  fi
}

force_stop() {
  if status ; then
    stop
    status && kill -KILL `cat "$pidfile"`
  fi
}

case "$1" in
  start) status || start ;;
  stop) stop ;;
  force-stop) force_stop ;;
  status) status ;;
  restart) stop && start ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|status|restart}" >&2
    exit 3
  ;;
esac

:
